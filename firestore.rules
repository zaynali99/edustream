// Minimum security rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"; }

    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid || isAdmin();
      allow write: if isSignedIn() && request.auth.uid == uid || isAdmin();
    }

    match /batches/{batchId} {
      allow read: if resource.data.visible == true || isAdmin();
      allow write: if isAdmin();
    }

    match /lectures/{lectureId} {
      allow read: if isAdmin() || (isSignedIn() && exists(/databases/$(database)/documents/enrollments/{e} where
        resource.data.batchId == get(/databases/$(database)/documents/lectures/$(lectureId)).data.batchId
        && get(/databases/$(database)/documents/enrollments/$(e)).data.uid == request.auth.uid
        && get(/databases/$(database)/documents/enrollments/$(e)).data.status == "approved"
      ));
      allow write: if isAdmin();
    }

    match /enrollments/{enrollId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn();
      allow update: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid && request.resource.data == resource.data);
    }

    match /payments/{paymentId} {
      allow read, create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
    }

    match /progress/{id} {
      allow read, write: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    match /notes/{noteId} {
      allow read, write: if isSignedIn() && request.resource.data.uid == request.auth.uid;
    }
  }
}
